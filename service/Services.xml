<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <!-- ai & Related Services -->


    <!-- Service that gets pointed to a directory for example /home/user/ai/dbs, each directory in there is a database
    name in each directory is a bunch of ddl sql files for each table in the database. Iterate through each file in the
    directory that ends in .sql and create a Table entry for each file where the tableName is the file name - .sql and
    the tableText is the contents of the file, the model is a parameter, but starts out with text-embedding-3-small -->
    <service verb="get" noun="TablesFromDirectory">
        <in-parameters>
            <parameter name="directory" required="true" default-value="/home/user/ai/dbs"/>
            <parameter name="modelEnumId" required="true" default-value="text-embedding-3-small"/>
            <parameter name="databaseNameList" required="true" type="List" default="['work_effort','issues','email_addresses','party','contact_mech','party_contact_mech']"/>
            <parameter name="systemMessageRemoteId" required="true" default-value="OpenAiEmbedding"/>
        </in-parameters>
        <out-parameters>
            <parameter name="tableIdList" type="List"/>
        </out-parameters>
        <actions>
            <!-- Initialize variables -->
            <set field="tableList" from="[]"/>
            <set field="tableIdList" from="[]"/>
            <set field="directoryReference" from="ec.resource.getLocationReference(directory)"/>

            <entity-find-one entity-name="SystemMessageRemote" value-field="systemMessageRemote" auto-field-map="[systemMessageRemoteId:systemMessageRemoteId]"/>
            <if condition="!systemMessageRemote"><return type="danger" error="true" message="Could not find SystemMessageRemote with ID ${systemMessageRemoteId}"/></if>

            <iterate list="directoryReference.getDirectoryEntries()" entry="databaseDirectory">
                <set field="databaseName" from="databaseDirectory.fileName"/>
                <iterate list="databaseDirectory.getDirectoryEntries()" entry="tableFile">
                    <set field="tableName" from="tableFile.fileName - '.sql'"/>
                    <if condition="tableFile.fileName.endsWith('.sql') &amp;&amp; databaseNameList.contains(tableName)">
                        <set field="respMap" from="[:]"/>
                        <script><![CDATA[
                            org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                                    .uri(systemMessageRemote.sendUrl).addHeader("Content-Type", "application/json")
                                    .addHeader("Authorization", "Bearer ${systemMessageRemote.privateKey}")
                                    .jsonObject([input:"test",model:modelEnumId,encoding_format:"float"])
                            org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                            respMap = (Map) restResponse.jsonObject()
//                            ec.logger.warn("restResponse ${restResponse.toString()}")
//                            ec.logger.warn("restResponse.statusCode ${restResponse.statusCode}")
//                            ec.logger.warn("context.toString(): ${context.toString()}")
                            if (restResponse.statusCode < 200 || restResponse.statusCode >= 300) {
                                ec.logger.warn("Unsuccessful embedding call from OpenAI: ${respMap}")
                                ec.message.addPublic("Could not get embedding from OpenAI", "warning")
                                ec.message.addError("Could not get embedding from OpenAI")
                                return
                            }
                            ]]></script>
<!--                        <log level="warn" message="respMap: ${respMap}"/>-->
<!--                        <log level="warn" message="respMap.data ${respMap.data}"/>-->
<!--                        <log level="warn" message="respMap.data[0] ${respMap.data[0]}"/>-->
<!--                        <log level="warn" message="respMap.data[0].embedding ${respMap.data[0].embedding}"/>-->
                        <service-call name="create#ai.sql.TableEmbedding" in-map="[
                            databaseName: databaseName,
                            tableName: tableName,
                            tableText: tableFile.getText(),
                            location: tableFile.location,
                            response: restResponse.jsonObject().toString(),
                            embedding: (String) groovy.json.JsonOutput.toJson(respMap?.data[0]?.embedding)]" out-map="context"/>
                        <set field="tableIdList" from="tableIdList + tableId"/>
                    </if>
                </iterate>
            </iterate>
        </actions>
    </service>

</services>
